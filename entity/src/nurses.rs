//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.11

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "nurses")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub name: String,
    #[sea_orm(unique)]
    pub employee_id: i32,
    #[sea_orm(unique)]
    pub license_number: String,
    pub polyclinic_id: i32,
    pub created_at: DateTime,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::employees::Entity",
        from = "Column::EmployeeId",
        to = "super::employees::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Employees,
    #[sea_orm(has_many = "super::nurses_polyclinic_assignments::Entity")]
    NursesPolyclinicAssignments,
    #[sea_orm(
        belongs_to = "super::polyclinic::Entity",
        from = "Column::PolyclinicId",
        to = "super::polyclinic::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Polyclinic,
}

impl Related<super::employees::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Employees.def()
    }
}

impl Related<super::nurses_polyclinic_assignments::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::NursesPolyclinicAssignments.def()
    }
}

impl Related<super::polyclinic::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Polyclinic.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
