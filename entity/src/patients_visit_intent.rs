//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.11

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "patients_visit_intent")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub patient_id: i32,
    pub visit_type: String,
    pub status: String,
    pub created_at: DateTime,
    pub updated_at: DateTime,
    pub referral_document_id: Option<i32>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::patients::Entity",
        from = "Column::PatientId",
        to = "super::patients::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Patients,
    #[sea_orm(has_one = "super::queue_ticket::Entity")]
    QueueTicket,
    #[sea_orm(
        belongs_to = "super::referral_documents::Entity",
        from = "Column::ReferralDocumentId",
        to = "super::referral_documents::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    ReferralDocuments,
}

impl Related<super::patients::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Patients.def()
    }
}

impl Related<super::queue_ticket::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::QueueTicket.def()
    }
}

impl Related<super::referral_documents::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ReferralDocuments.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
