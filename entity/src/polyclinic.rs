//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.11

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "polyclinic")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    #[sea_orm(unique)]
    pub code: String,
    pub room_code: String,
    pub name: String,
    pub description: Option<String>,
    pub department_code: String,
    pub created_at: DateTime,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::departments::Entity",
        from = "Column::DepartmentCode",
        to = "super::departments::Column::Code",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Departments,
    #[sea_orm(has_many = "super::doctor_schedules::Entity")]
    DoctorSchedules,
    #[sea_orm(has_many = "super::doctors::Entity")]
    Doctors,
    #[sea_orm(has_many = "super::nurses::Entity")]
    Nurses,
    #[sea_orm(has_many = "super::nurses_polyclinic_assignments::Entity")]
    NursesPolyclinicAssignments,
    #[sea_orm(
        belongs_to = "super::rooms::Entity",
        from = "Column::RoomCode",
        to = "super::rooms::Column::Code",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Rooms,
}

impl Related<super::departments::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Departments.def()
    }
}

impl Related<super::doctor_schedules::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::DoctorSchedules.def()
    }
}

impl Related<super::doctors::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Doctors.def()
    }
}

impl Related<super::nurses::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Nurses.def()
    }
}

impl Related<super::nurses_polyclinic_assignments::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::NursesPolyclinicAssignments.def()
    }
}

impl Related<super::rooms::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Rooms.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
