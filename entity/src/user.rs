//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.11

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "users")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    #[sea_orm(unique)]
    pub employee_id: i32,
    #[sea_orm(unique)]
    pub username: String,
    pub password: String,
    pub role: Role,
    pub last_login: Option<DateTime>,
    pub is_active: bool,
    pub created_at: DateTime,
}

#[derive(Clone, Debug, PartialEq, Eq, EnumIter, DeriveActiveEnum, DeriveDisplay)]
#[sea_orm(rs_type = "String", db_type = "Text")]
pub enum Role {
    #[sea_orm(string_value = "admin")]
    Admin,
    #[sea_orm(string_value = "staff")]
    Staff,
    #[sea_orm(string_value = "doctor")]
    Doctor,
    #[sea_orm(string_value = "emergency")]
    Emergency,
    #[sea_orm(string_value = "nurse")]
    Nurse,
    #[sea_orm(string_value = "cashier")]
    Cashier,
    #[sea_orm(string_value = "lab_staff")]
    LabStaff,
    #[sea_orm(string_value = "pharmacist")]
    Pharmacist,
    #[sea_orm(string_value = "superadmin")]
    Superadmin,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::employees::Entity",
        from = "Column::EmployeeId",
        to = "super::employees::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Employees,
}

impl Related<super::employees::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Employees.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
